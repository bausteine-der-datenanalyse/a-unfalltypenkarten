[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anwendungsbaustein Unfalltypenkarten",
    "section": "",
    "text": "Einleitung",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#voraussetzungen",
    "href": "index.html#voraussetzungen",
    "title": "Anwendungsbaustein Unfalltypenkarten",
    "section": "Voraussetzungen",
    "text": "Voraussetzungen\nTeständerung\nZum erfolgreichen Bearbeiten dieses Anwendungsbausteins benötigen Sie die Inhalte des Methodenbausteins Grundlagen der Statistik [Referenz] und des Werkzeugbausteins Datenmanagements [Referenz]",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#lernziele",
    "href": "index.html#lernziele",
    "title": "Anwendungsbaustein Unfalltypenkarten",
    "section": "Lernziele",
    "text": "Lernziele\nZiel dieses Bausteins ist es, typische Inhalte von Unfalltypenkarten in grafischer Form mithilfe der Programmiersprache R darzustellen. Dabei lernen Sie wo deutschsprachige Unfalldaten gefunden werden können, wie Unfalldaten eingelesen und analysiert werden und welche verschiedenen Darstellungsformen sich für bestimmte Datentypen eignen.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#verwendete-datensätze",
    "href": "index.html#verwendete-datensätze",
    "title": "Anwendungsbaustein Unfalltypenkarten",
    "section": "Verwendete Datensätze",
    "text": "Verwendete Datensätze\nDie statistischen Ämter des Bundes und der Länder erheben und veröffentlichen mit der Straßenverkehrsunfallstatistik die Verkehrsunfälle mit Personenschaden oder Sachschaden in Deutschland. Im Unfallatlas werden Unfälle mit Personenschaden geführt. Für die Sicherheitsanalyse von Verkehrsnetzen können diese Daten verwendet und analysiert werden.\nVerwenden Sie für das Straßennetz die Daten des Bundesinformationssystems Straße (BISStra) der Bundesanstalt für Straßen- und Verkehrswesen (BASt): https://www.bast.de/DE/Verkehrstechnik/Fachthemen/v2-bisstra.html\nDaten des Straßennetzes des Bundesinformationssystem Straße (BISStra)\nUnfalldaten des Unfallatlas des Statistischen Bundesamts",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_unfalltypenkarten.html",
    "href": "aufgabe/aufgaben_unfalltypenkarten.html",
    "title": "1  Aufgaben zu Unfalltypenkarten",
    "section": "",
    "text": "1.1 Aufgabe 1 : Unfalltypenkarten",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zu Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-1-unfalltypenkarten",
    "href": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-1-unfalltypenkarten",
    "title": "1  Aufgaben zu Unfalltypenkarten",
    "section": "",
    "text": "Erstellen Sie nach den Vorgaben der M Uko eine Unfalltypenkarte für eine ausgewählte Autobahn und für Gesamtdeutschland eine Unfalltypenkarte mit ggplot für Unfälle im Jahr 2022.\nErstellen Sie nach den Vorgaben der M Uko eine Unfalltypenkarte für eine ausgewählte Autobahn und für Gesamtdeutschland eine Unfalltypenkarte mit leaflet für Unfälle im Jahr 2022.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zu Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-2-unfallhäufungsstellen",
    "href": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-2-unfallhäufungsstellen",
    "title": "1  Aufgaben zu Unfalltypenkarten",
    "section": "1.2 Aufgabe 2 : Unfallhäufungsstellen",
    "text": "1.2 Aufgabe 2 : Unfallhäufungsstellen\nÜberprüfen Sie nach den Vorgaben der M Uko Unfallhäufungsstellen für die Stadt Bochum.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zu Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-3-interaktive-leaflet-karte-mit-shiny",
    "href": "aufgabe/aufgaben_unfalltypenkarten.html#aufgabe-3-interaktive-leaflet-karte-mit-shiny",
    "title": "1  Aufgaben zu Unfalltypenkarten",
    "section": "1.3 Aufgabe 3: Interaktive Leaflet-Karte mit Shiny",
    "text": "1.3 Aufgabe 3: Interaktive Leaflet-Karte mit Shiny\nErstellen Sie eine interaktive Leaflet-Karte der Unfälle in Bochum in Shiny. Die Interaktivität soll folgendermaßen gestaltet werden:\n\nWählbare Unfallkategorien\nWählbare Unfalltypen\nWählbare Verkehrsbeteiligte\nWählbare Jahre\n\nZusätzlich soll unter der Karte eine Tabelle mit den gewählten Filtern dargestellt werden.\nOptional : Ein Download-Button für die gewählten Filtereinstellungen, der eine CSV-Datei erzeugt und herunterlädt.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Aufgaben zu Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "musterloesung.html",
    "href": "musterloesung.html",
    "title": "2  Musterlösung Unfalltypenkarten",
    "section": "",
    "text": "2.1 Datenaufbereitung für alle Aufgaben",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#datenaufbereitung-für-alle-aufgaben",
    "href": "musterloesung.html#datenaufbereitung-für-alle-aufgaben",
    "title": "2  Musterlösung Unfalltypenkarten",
    "section": "",
    "text": "2.1.1 A43\nUnfälle filtern:\n```{r}\nunfaelle_43 = unfaelle %&gt;%\n    # Welche Autobahn am Nächsten\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43)) %&gt;% \n    # Distanz zur A43\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))\n```\nAlles nicht in der Nähe von A43 raus:\n```{r}\nunfaelle_autobahn = unfaelle_43 |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n```\n\n\n2.1.2 Deutschland\nUnfälle filtern:\n```{r}\nunfaelle_de = unfaelle %&gt;%\n    # Welche Autobahn ist am Nächsten\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), strecke_de)) %&gt;% \n    # Distanz zur nächsten Autobahn berechnen\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), strecke_de[nearest_autobahn_id, ], by_element = TRUE))\n```\nAlles nicht in der Nähe von BAB raus:\n```{r}\nunfaelle_de_autobahn = unfaelle_de |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n```",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-1",
    "href": "musterloesung.html#aufgabe-1",
    "title": "2  Musterlösung Unfalltypenkarten",
    "section": "2.2 Aufgabe 1",
    "text": "2.2 Aufgabe 1\n\n2.2.1 Mit ggplot\nAusgewählte Autobahn:\n```{r}\nggplot () +\n  geom_sf(data = a43, size = 5) +\n  geom_sf(data = unfaelle_autobahn,mapping = aes(group = UTYP1,color = as.character(UTYP1),size = as.character(UKATEGORIE) )) +\n  scale_colour_manual(values = c(\"1\" = \"#04B431\",\"2\" = \"yellow\",\"3\" = \"red\",\"4\" = \"white\",\"5\" = \"#00BFFF\",\"6\" = \"orange\",\"7\" = \"black\")) +\n  scale_size_manual(values = c(\"2\" = 1.33, \"3\"=1)) +\n  labs(title = \"Verkehrsunfalltypen der A43 im Jahr 2022\", color = \"Unfalltypen\" , size = \"Unfallkategorien\") +\n theme(plot.title = element_text(size=10))\n```\nGesamtdeutschland:\n```{r}\nggplot () +\n  geom_sf(data = d_de, fill = NA, size = 0.5) +\n  geom_sf(data = strecke_de, size = 5, color = \"pink\") +\n  geom_sf(data = unfaelle_de_autobahn,\n          mapping = aes(group = UTYP1,color = as.factor(UTYP1),size = as.factor(UKATEGORIE))) +\n  scale_colour_manual(values = c(\"1\" = \"#04B431\",\"2\" = \"yellow\",\"3\" = \"red\",\"4\" = \"white\",\"5\" = \"#00BFFF\",\"6\" = \"orange\",\"7\" = \"black\")) +\n  scale_size_manual(values = c(\"1\" = 0.04,\"2\" = 0.04, \"3\"=0.03)) +\n  labs(title = \"Verkehrsunfalltypen der A43 im Jahr 2022\", color = \"Unfalltypen\", size = \"Unfallkategorie\") +\n theme(plot.title = element_text(size=10))\n```\n\n\n2.2.2 Mit leaflet\nPalette festlegen\n```{r}\npal &lt;- colorFactor(c(\"#04B431\", \"yellow\",  \"red\", \"white\", \"#00BFFF\", \"orange\", \"black\"), domain = c(1,2,3,4,5,6,7))\n```\nAusgewählte Autobahn:\n```{r}\nleaflet(unfaelle_autobahn) %&gt;%   \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\")\n```\nGesamtdeutschland:\n```{r}\nleaflet(unfaelle_de_autobahn) %&gt;% \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\")\n\n```",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-2",
    "href": "musterloesung.html#aufgabe-2",
    "title": "2  Musterlösung Unfalltypenkarten",
    "section": "2.3 Aufgabe 2",
    "text": "2.3 Aufgabe 2\nUnfalldaten von 3 Jahren laden\n```{r}\n#| warning: false\nunfall_csv23 = read_csv2(\"data/Unfallorte2023_LinRef.csv\") \nunfaelle_23 &lt;- st_as_sf(unfall_csv23, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n\nunfall_csv21 = read_csv2(\"data/Unfallorte2022_LinRef.csv\") \nunfaelle_21 &lt;- st_as_sf(unfall_csv21, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n```\nBochum Unfälle zur Erstellung einer Unfallhäufungsstelle\nDatensätze kombinieren:\n```{r}\n\nall_data &lt;- bind_rows(list(unfaelle_21,unfaelle,unfaelle_23))\n\nUnfall_3J &lt;- all_data |&gt;\n  st_zm()\n```\nBochum als Bounding Box:\n```{r}\nd_bochum &lt;- gisco_get_nuts(nuts_id = \"DEA51\", nuts_level = 3, resolution = 03)%&gt;% st_transform(25832)\n\nUnfall_zm &lt;- unfaelle |&gt;\n  st_zm()\n\nBochum_Unfall &lt;- Unfall_zm |&gt;\n    filter(st_contains(d_bochum, Unfall_zm, sparse = FALSE)[1,])\n\nBochum_Unfall_3J &lt;- Unfall_3J |&gt;\n    filter(st_contains(d_bochum, Unfall_3J, sparse = FALSE)[1,])\n```\nUnfälle im Umkreis zählen:\n```{r}\nbo_dist &lt;- as_tibble(st_distance(Bochum_Unfall_3J))%&gt;%\n  mutate_all(as.numeric)\n\nbo_dist_3 &lt;- bo_dist %&gt;% \n  mutate(sum_unfall = rowSums(. &lt;= 25) - 1)\n\nbo_dist_anzahl &lt;- bo_dist_3 %&gt;%\n  select(sum_unfall)\n\nTest_UHS &lt;- bind_cols(Bochum_Unfall_3J,bo_dist_anzahl) \n\nTest_UHS_2 &lt;- Test_UHS |&gt;\n  mutate(popup = paste0(\"Anzahl der Unfälle in der Nähe:\", sum_unfall,\n                               \"&lt;br/&gt; Unfalltyp:\", UTYP1) ,\n         popup_UHS = paste0(\"Hier liegt eine Unfallhäufungsstelle vor.\",\n                               \"&lt;br/&gt; Anzahl der Unfälle in der Nähe:\", sum_unfall))\n```\nLeaflet-Karte mit mehreren Markern:\n```{r}\nleaflet(Test_UHS_2) %&gt;%   \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\" ,\n                   popup = ~popup) %&gt;%\n  addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(sum_unfall &gt;= \"5\", 15, 0),\n                   fillOpacity = ~ifelse(sum_unfall &gt;= \"5\", 0, 0) ,\n                   stroke = ~ifelse(sum_unfall &gt;= \"5\", TRUE, FALSE),\n                   fillColor = \"pink\",\n                   color = \"black\" ,\n                   popup = ~popup_UHS) %&gt;%\n  addMeasure(primaryLengthUnit = \"meters\") %&gt;%\n  addLegend(\"bottomright\", colors = c(\"#04B431\", \"yellow\",  \"red\", \"white\", \"#00BFFF\", \"orange\", \"black\") ,labels = c(\"Fahrunfall\",\"Abbiege-Unfall\", \"Einbiegen/Kreuzen-Unfall\", \"Überschreiten-Unfall\",\"Unfall durch ruhenden verkehr\", \"Unfall im Längsverkehr\", \"Sonstiger Unfall\"),title = \"Unfalltypen\")\n```",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "musterloesung.html#aufgabe-3",
    "href": "musterloesung.html#aufgabe-3",
    "title": "2  Musterlösung Unfalltypenkarten",
    "section": "2.4 Aufgabe 3",
    "text": "2.4 Aufgabe 3\nSiehe Dokument unfaelle_shiny.qmd",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Musterlösung Unfalltypenkarten</span>"
    ]
  },
  {
    "objectID": "unfalltypenkarten.html",
    "href": "unfalltypenkarten.html",
    "title": "3  Ausführliche Erläuterung zur Musterlösung",
    "section": "",
    "text": "3.1 Datenaufbereitung\nunfall_csv = read_csv2(\"data/Unfallorte2022_LinRef.csv\") \nunfaelle &lt;- st_as_sf(unfall_csv, coords = c(\"LINREFX\", \"LINREFY\"), \n                  crs = 25832)\nDeutschlandkarte erstellen:\nd_de &lt;- gisco_get_nuts(country = \"Germany\", nuts_level = 0, resolution = 03)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterung zur Musterlösung</span>"
    ]
  },
  {
    "objectID": "unfalltypenkarten.html#datenaufbereitung",
    "href": "unfalltypenkarten.html#datenaufbereitung",
    "title": "3  Ausführliche Erläuterung zur Musterlösung",
    "section": "",
    "text": "3.1.1 A43\nDaten einlesen:\n\nstrecke &lt;- read_sf(\"data/geo/BFStr_Netz_SK.geojson\")\na43 &lt;- strecke |&gt;\n  filter(Str_Kennung == \"A43\" & Sk_Achse == \"Hauptachse\") |&gt;\n  mutate(rownumber = row_number())\n\nUnfälle filtern:\n\nunfaelle_43 = unfaelle %&gt;%\n    # find out which autobahn is closest by\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43)) %&gt;% \n    # calculate distance to closest autobahn\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))\n\nAlles nicht in der Nähe von BAB raus:\n\nunfaelle_autobahn = unfaelle_43 |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()\n\n\n\n3.1.2 Gesamtdeutschland\n\nstrecke_de &lt;- strecke |&gt;\n  filter(Str_Klasse_kurz == \"A\" & Sk_Achse == \"Hauptachse\") |&gt;\n  mutate(rownumber = row_number())\n\nUnfälle filtern:\n\nunfaelle_de = unfaelle %&gt;%\n    # find out which autobahn is closest by\n    mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), strecke_de)) %&gt;% \n    # calculate distance to closest autobahn\n    mutate(nearest_autobahn_distance = st_distance(st_zm(.), strecke_de[nearest_autobahn_id, ], by_element = TRUE))\n\nAlles nicht in der Nähe von BAB raus:\n\nunfaelle_de_autobahn = unfaelle_de |&gt; \n    filter(as.double(nearest_autobahn_distance) &lt;= 15) |&gt;\n  st_zm()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterung zur Musterlösung</span>"
    ]
  },
  {
    "objectID": "unfalltypenkarten.html#aufgabe-1-unfalltypenkarten",
    "href": "unfalltypenkarten.html#aufgabe-1-unfalltypenkarten",
    "title": "3  Ausführliche Erläuterung zur Musterlösung",
    "section": "3.2 Aufgabe 1: Unfalltypenkarten",
    "text": "3.2 Aufgabe 1: Unfalltypenkarten\n\n3.2.1 Mit ggplot\n\n3.2.1.1 A43\n\nggplot () +\n  geom_sf(data = a43, size = 5) +\n  geom_sf(data = unfaelle_autobahn,mapping = aes(group = UTYP1,color = as.character(UTYP1),size = as.character(UKATEGORIE) )) +\n  scale_colour_manual(values = c(\"1\" = \"#04B431\",\"2\" = \"yellow\",\"3\" = \"red\",\"4\" = \"white\",\"5\" = \"#00BFFF\",\"6\" = \"orange\",\"7\" = \"black\")) +\n  scale_size_manual(values = c(\"2\" = 1.33, \"3\"=1)) +\n  labs(title = \"Verkehrsunfalltypen der A43 im Jahr 2022\", color = \"Unfalltypen\" , size = \"Unfallkategorien\") +\n theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\n\n\n3.2.1.2 Deutschland\n\nggplot () +\n  geom_sf(data = d_de, fill = NA, size = 0.5) +\n  geom_sf(data = strecke_de, size = 5, color = \"pink\") +\n  geom_sf(data = unfaelle_de_autobahn,\n          mapping = aes(group = UTYP1,color = as.factor(UTYP1),size = as.factor(UKATEGORIE))) +\n  scale_colour_manual(values = c(\"1\" = \"#04B431\",\"2\" = \"yellow\",\"3\" = \"red\",\"4\" = \"white\",\"5\" = \"#00BFFF\",\"6\" = \"orange\",\"7\" = \"black\")) +\n  scale_size_manual(values = c(\"1\" = 0.04,\"2\" = 0.04, \"3\"=0.03)) +\n  labs(title = \"Verkehrsunfalltypen der A43 im Jahr 2022\", color = \"Unfalltypen\", size = \"Unfallkategorie\") +\n theme(plot.title = element_text(size=10))\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Mit leaflet\nPalette festlegen\n\npal &lt;- colorFactor(c(\"#04B431\", \"yellow\",  \"red\", \"white\", \"#00BFFF\", \"orange\", \"black\"), domain = c(1,2,3,4,5,6,7))\n\n\n3.2.2.1 A43:\n\nleaflet(unfaelle_autobahn) %&gt;%   \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\")\n\n\n\n\n\n\n\n3.2.2.2 Gesamtdeutschland:\n\nleaflet(unfaelle_de_autobahn) %&gt;% \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterung zur Musterlösung</span>"
    ]
  },
  {
    "objectID": "unfalltypenkarten.html#aufgabe-2-unfallhäufungsstellen",
    "href": "unfalltypenkarten.html#aufgabe-2-unfallhäufungsstellen",
    "title": "3  Ausführliche Erläuterung zur Musterlösung",
    "section": "3.3 Aufgabe 2 : Unfallhäufungsstellen",
    "text": "3.3 Aufgabe 2 : Unfallhäufungsstellen\n\n3.3.1 Unfalldaten von 3 Jahren laden\n\nunfall_csv23 = read_csv2(\"data/Unfallorte2023_LinRef.csv\") \nunfaelle_23 &lt;- st_as_sf(unfall_csv23, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n\nunfall_csv21 = read_csv2(\"data/Unfallorte2022_LinRef.csv\") \nunfaelle_21 &lt;- st_as_sf(unfall_csv21, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n\n\n\n3.3.2 Bochum Unfälle zur Erstellung einer Unfallhäufungsstelle\nDatensätze kombinieren:\n\nall_data &lt;- bind_rows(list(unfaelle_21,unfaelle,unfaelle_23))\n\nUnfall_3J &lt;- all_data |&gt;\n  st_zm()\n\nBochum als Bounding Box:\n\nd_bochum &lt;- gisco_get_nuts(nuts_id = \"DEA51\", nuts_level = 3, resolution = 03)%&gt;% st_transform(25832)\n\nUnfall_zm &lt;- unfaelle |&gt;\n  st_zm()\n\nBochum_Unfall &lt;- Unfall_zm |&gt;\n    filter(st_contains(d_bochum, Unfall_zm, sparse = FALSE)[1,])\n\nBochum_Unfall_3J &lt;- Unfall_3J |&gt;\n    filter(st_contains(d_bochum, Unfall_3J, sparse = FALSE)[1,])\n\nLeafletkarte von Bochum im Jahr 2022\n\nleaflet(Bochum_Unfall) %&gt;%   \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\" ,\n                   popup = ~as.character(UIDENTSTLAE)) %&gt;%\n  addMeasure(primaryLengthUnit = \"meters\") %&gt;%\n  addLegend(\"bottomright\", colors = c(\"#04B431\", \"yellow\",  \"red\", \"white\", \"#00BFFF\", \"orange\", \"black\") ,labels = c(\"Fahrunfall\",\"Abbiege-Unfall\", \"Einbiegen/Kreuzen-Unfall\", \"Überschreiten-Unfall\",\"Unfall durch ruhenden verkehr\", \"Unfall im Längsverkehr\", \"Sonstiger Unfall\"),title = \"Unfalltypen\")\n\n\n\n\n\nUnfälle im Umkreis zählen:\n\nbo_dist &lt;- as_tibble(st_distance(Bochum_Unfall_3J))%&gt;%\n  mutate_all(as.numeric)\n\nbo_dist_3 &lt;- bo_dist %&gt;% \n  mutate(sum_unfall = rowSums(. &lt;= 25) - 1)\n\nbo_dist_anzahl &lt;- bo_dist_3 %&gt;%\n  select(sum_unfall)\n\nTest_UHS &lt;- bind_cols(Bochum_Unfall_3J,bo_dist_anzahl) \n\nTest_UHS_2 &lt;- Test_UHS |&gt;\n  mutate(popup = paste0(\"Anzahl der Unfälle in der Nähe:\", sum_unfall,\n                               \"&lt;br/&gt; Unfalltyp:\", UTYP1) ,\n         popup_UHS = paste0(\"Hier liegt eine Unfallhäufungsstelle vor.\",\n                               \"&lt;br/&gt; Anzahl der Unfälle in der Nähe:\", sum_unfall))\n\nLeaflet-Karte mit mehreren Markern:\n\nleaflet(Test_UHS_2) %&gt;%   \n  addTiles() %&gt;%\n    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(UKATEGORIE == \"3\", 6, 8),\n                   stroke = ~ifelse(UKATEGORIE == \"1\", TRUE, FALSE), \n                   fillOpacity = 0.9,\n                   fillColor = ~pal(UTYP1),\n                   color = \"black\" ,\n                   popup = ~popup) %&gt;%\n  addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,\n                   radius = ~ifelse(sum_unfall &gt;= \"5\", 15, 0),\n                   fillOpacity = ~ifelse(sum_unfall &gt;= \"5\", 0, 0) ,\n                   stroke = ~ifelse(sum_unfall &gt;= \"5\", TRUE, FALSE),\n                   fillColor = \"pink\",\n                   color = \"black\" ,\n                   popup = ~popup_UHS) %&gt;%\n  addMeasure(primaryLengthUnit = \"meters\") %&gt;%\n  addLegend(\"bottomright\", colors = c(\"#04B431\", \"yellow\",  \"red\", \"white\", \"#00BFFF\", \"orange\", \"black\") ,labels = c(\"Fahrunfall\",\"Abbiege-Unfall\", \"Einbiegen/Kreuzen-Unfall\", \"Überschreiten-Unfall\",\"Unfall durch ruhenden verkehr\", \"Unfall im Längsverkehr\", \"Sonstiger Unfall\"),title = \"Unfalltypen\")\n\n\n\n\n\nWichtige Anmerkung\nDer Code funktioniert. Allerdings stellt Leaflet nur einen Punkt bei exakt denselben Koordinaten dar. Beispielsweise mehrere Unfälle an dem Ort “POINT (378618.6 5701196)” stellt nur den aktuellsten Unfall dar.\n\n3.3.2.1 WIP : Gefilterte CSV-Ausgabe für UHS\nZu der UHS die jeweiligen Unfälle: Liste der Unfälle aufgeben lassen\nMehrere Dateien importieren:\n\nunfall_csv = read_csv2(\"data/Unfallorte2020_LinRef.csv\", locale = locale(encoding = 'iso-8859-1')) \n\nunfall_csv_sf = st_as_sf(unfall_csv, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n\nBochum_Unfall_csv &lt;- unfall_csv_sf |&gt;\n    filter(st_contains(d_bochum, unfall_csv_sf, sparse = FALSE)[1,])\n\n\nread_unfaelle &lt;- function(f) {\n  read_csv2(f) |&gt;\n    rename(any_of(c(\n      STRZUSTAND = \"USTRZUSTAND\",\n      STRZUSTAND = \"IstStrassenzustand\" ,\n      OBJECTID = \"OID_\"\n    ))) |&gt;\n    mutate(\n      UWOCHENTAG = wday(as.numeric(UWOCHENTAG), label=T) ,\n      UMONAT = month(as.numeric(UMONAT), label=T)\n    )\n}\n\ndata &lt;- list.files(path=\"data\", pattern = \"\\\\.csv$\",full.names=T) |&gt;\n  map(read_unfaelle) |&gt;\n  list_rbind()\n\n\ndata_sf &lt;-st_as_sf(data, coords = c(\"LINREFX\", \"LINREFY\"), \n                 crs = 25832)\n\nBochum_Unfall &lt;- data_sf |&gt;\n    filter(st_contains(d_bochum, data_sf, sparse = FALSE)[1,])\n\nBochum_tbl &lt;- Bochum_Unfall %&gt;% \n  group_by(UJAHR) %&gt;% \n  summarise(PKWUnfall = sum(IstPKW == \"1\") , Radunfall = sum(IstRad == \"1\") , Fussunfall = sum(IstFuss == \"1\")) %&gt;%\n  st_drop_geometry() %&gt;%\n  rename(Jahr = \"UJAHR\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Ausführliche Erläuterung zur Musterlösung</span>"
    ]
  }
]