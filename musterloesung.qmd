---
title: "Musterlösung Unfalltypenkarten"
format: html
execute:
  cache: true
---
**Verwendete Pakete laden**

```{{r}}
#| include: false
library(ggplot2)
library(tidyverse)
library(lubridate)
library(readxl)
library(kableExtra)
library(sf)
library(osmdata)
library(giscoR)
library(leaflet)
library(shiny)
```

**Daten einlesen und aufbereiten**


Deutschlandkarte:

```{{r}}
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
```

Unfalldaten einlesen:

```{{r}}
#| warning: false

unfall_csv = read_csv2("data/Unfallorte2022_LinRef.csv") 
unfaelle <- st_as_sf(unfall_csv, coords = c("LINREFX", "LINREFY"), 
                  crs = 25832)
```

Streckenabschnitte einlesen:

```{{r}}
strecke <- read_sf("data/geo/BFStr_Netz_SK.geojson")
```

Streckenabschnitte A43:

```{{r}}
a43 <- strecke |>
  filter(Str_Kennung == "A43" & Sk_Achse == "Hauptachse") |>
  mutate(rownumber = row_number())
```

Streckenabschnitte Deutschland:

```{{r}}
strecke_de <- strecke |>
  filter(Str_Klasse_kurz == "A" & Sk_Achse == "Hauptachse") |>
  mutate(rownumber = row_number())
```

## Datenaufbereitung für alle Aufgaben

### A43

Unfälle filtern:

```{{r}}
unfaelle_43 = unfaelle %>%
	# Welche Autobahn am Nächsten
	mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), a43)) %>% 
	# Distanz zur A43
	mutate(nearest_autobahn_distance = st_distance(st_zm(.), a43[nearest_autobahn_id, ], by_element = TRUE))
```

Alles nicht in der Nähe von A43 raus:

```{{r}}
unfaelle_autobahn = unfaelle_43 |> 
	filter(as.double(nearest_autobahn_distance) <= 15) |>
  st_zm()
```

### Deutschland

Unfälle filtern:

```{{r}}
unfaelle_de = unfaelle %>%
	# Welche Autobahn ist am Nächsten
	mutate(nearest_autobahn_id = st_nearest_feature(st_zm(.), strecke_de)) %>% 
	# Distanz zur nächsten Autobahn berechnen
	mutate(nearest_autobahn_distance = st_distance(st_zm(.), strecke_de[nearest_autobahn_id, ], by_element = TRUE))
```

Alles nicht in der Nähe von BAB raus:

```{{r}}
unfaelle_de_autobahn = unfaelle_de |> 
	filter(as.double(nearest_autobahn_distance) <= 15) |>
  st_zm()
```

## Aufgabe 1

### Mit `ggplot`

Ausgewählte Autobahn:

```{{r}}
ggplot () +
  geom_sf(data = a43, size = 5) +
  geom_sf(data = unfaelle_autobahn,mapping = aes(group = UTYP1,color = as.character(UTYP1),size = as.character(UKATEGORIE) )) +
  scale_colour_manual(values = c("1" = "#04B431","2" = "yellow","3" = "red","4" = "white","5" = "#00BFFF","6" = "orange","7" = "black")) +
  scale_size_manual(values = c("2" = 1.33, "3"=1)) +
  labs(title = "Verkehrsunfalltypen der A43 im Jahr 2022", color = "Unfalltypen" , size = "Unfallkategorien") +
 theme(plot.title = element_text(size=10))
```

Gesamtdeutschland:

```{{r}}
ggplot () +
  geom_sf(data = d_de, fill = NA, size = 0.5) +
  geom_sf(data = strecke_de, size = 5, color = "pink") +
  geom_sf(data = unfaelle_de_autobahn,
          mapping = aes(group = UTYP1,color = as.factor(UTYP1),size = as.factor(UKATEGORIE))) +
  scale_colour_manual(values = c("1" = "#04B431","2" = "yellow","3" = "red","4" = "white","5" = "#00BFFF","6" = "orange","7" = "black")) +
  scale_size_manual(values = c("1" = 0.04,"2" = 0.04, "3"=0.03)) +
  labs(title = "Verkehrsunfalltypen der A43 im Jahr 2022", color = "Unfalltypen", size = "Unfallkategorie") +
 theme(plot.title = element_text(size=10))
```

### Mit `leaflet`

**Palette festlegen**

```{{r}}
pal <- colorFactor(c("#04B431", "yellow",  "red", "white", "#00BFFF", "orange", "black"), domain = c(1,2,3,4,5,6,7))
```

Ausgewählte Autobahn:

```{{r}}
leaflet(unfaelle_autobahn) %>%   
  addTiles() %>%
    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,
                   radius = ~ifelse(UKATEGORIE == "3", 6, 8),
                   stroke = ~ifelse(UKATEGORIE == "1", TRUE, FALSE), 
                   fillOpacity = 0.9,
                   fillColor = ~pal(UTYP1),
                   color = "black")
```

Gesamtdeutschland:

```{{r}}
leaflet(unfaelle_de_autobahn) %>% 
  addTiles() %>%
    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,
                   radius = ~ifelse(UKATEGORIE == "3", 6, 8),
                   stroke = ~ifelse(UKATEGORIE == "1", TRUE, FALSE), 
                   fillOpacity = 0.9,
                   fillColor = ~pal(UTYP1),
                   color = "black")

```

## Aufgabe 2

**Unfalldaten von 3 Jahren laden**

```{{r}}
#| warning: false
unfall_csv23 = read_csv2("data/Unfallorte2023_LinRef.csv") 
unfaelle_23 <- st_as_sf(unfall_csv23, coords = c("LINREFX", "LINREFY"), 
                 crs = 25832)

unfall_csv21 = read_csv2("data/Unfallorte2022_LinRef.csv") 
unfaelle_21 <- st_as_sf(unfall_csv21, coords = c("LINREFX", "LINREFY"), 
                 crs = 25832)
```

**Bochum Unfälle zur Erstellung einer Unfallhäufungsstelle**

Datensätze kombinieren:

```{{r}}

all_data <- bind_rows(list(unfaelle_21,unfaelle,unfaelle_23))

Unfall_3J <- all_data |>
  st_zm()
```

Bochum als Bounding Box:

```{{r}}
d_bochum <- gisco_get_nuts(nuts_id = "DEA51", nuts_level = 3, resolution = 03)%>% st_transform(25832)

Unfall_zm <- unfaelle |>
  st_zm()

Bochum_Unfall <- Unfall_zm |>
    filter(st_contains(d_bochum, Unfall_zm, sparse = FALSE)[1,])

Bochum_Unfall_3J <- Unfall_3J |>
    filter(st_contains(d_bochum, Unfall_3J, sparse = FALSE)[1,])
```

Unfälle im Umkreis zählen:

```{{r}}
bo_dist <- as_tibble(st_distance(Bochum_Unfall_3J))%>%
  mutate_all(as.numeric)

bo_dist_3 <- bo_dist %>% 
  mutate(sum_unfall = rowSums(. <= 25) - 1)

bo_dist_anzahl <- bo_dist_3 %>%
  select(sum_unfall)

Test_UHS <- bind_cols(Bochum_Unfall_3J,bo_dist_anzahl) 

Test_UHS_2 <- Test_UHS |>
  mutate(popup = paste0("Anzahl der Unfälle in der Nähe:", sum_unfall,
                               "<br/> Unfalltyp:", UTYP1) ,
         popup_UHS = paste0("Hier liegt eine Unfallhäufungsstelle vor.",
                               "<br/> Anzahl der Unfälle in der Nähe:", sum_unfall))
```

**Leaflet-Karte mit mehreren Markern**:

```{{r}}
leaflet(Test_UHS_2) %>%   
  addTiles() %>%
    addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,
                   radius = ~ifelse(UKATEGORIE == "3", 6, 8),
                   stroke = ~ifelse(UKATEGORIE == "1", TRUE, FALSE), 
                   fillOpacity = 0.9,
                   fillColor = ~pal(UTYP1),
                   color = "black" ,
                   popup = ~popup) %>%
  addCircleMarkers(lng = ~XGCSWGS84, lat = ~YGCSWGS84,
                   radius = ~ifelse(sum_unfall >= "5", 15, 0),
                   fillOpacity = ~ifelse(sum_unfall >= "5", 0, 0) ,
                   stroke = ~ifelse(sum_unfall >= "5", TRUE, FALSE),
                   fillColor = "pink",
                   color = "black" ,
                   popup = ~popup_UHS) %>%
  addMeasure(primaryLengthUnit = "meters") %>%
  addLegend("bottomright", colors = c("#04B431", "yellow",  "red", "white", "#00BFFF", "orange", "black") ,labels = c("Fahrunfall","Abbiege-Unfall", "Einbiegen/Kreuzen-Unfall", "Überschreiten-Unfall","Unfall durch ruhenden verkehr", "Unfall im Längsverkehr", "Sonstiger Unfall"),title = "Unfalltypen")
```

## Aufgabe 3

Siehe Dokument unfaelle_shiny.qmd  

